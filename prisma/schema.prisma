// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  TEACHER
  LEARNER
}

enum LogStatus {
  DRAFT
  SUBMITTED
  APPROVED
  REJECTED
  RESUBMITTED
}

enum Sex {
  MALE
  FEMALE
  TRANSGENDER
}

model User {
  id          String    @id @default(cuid())
  email       String    @unique
  password    String
  name        String
  role        UserRole  @default(LEARNER)
  phone       String?
  city        String?
  country     String?
  address     String?
  moodleId    String?   @unique
  kycVerified Boolean   @default(false)
  studentId   String?
  lastLogin   DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  // Relations
  createdLogs       Log[]            @relation("LogCreator")
  approvedLogs      Log[]            @relation("LogApprover")
  rejectedLogs      Log[]            @relation("LogRejecter")
  teachingCourses   Course[]         @relation("TeacherCourses")
  courseTeachers    CourseTeacher[]  @relation("UserCoursesTeaching") // Fixed relation name to match CourseTeacher
  enrolledCourses   CourseEnrollment[]
  logs              CourseLog[]

  @@map("users")
}

model Course {
  id                        String    @id @default(cuid())
  title                     String
  name                      String
  enrollmentNumber          String    @unique
  facultyName               String?
  designation               String?
  hospitalName              String?
  location                  String
  contactProgram            String?
  description               String?
  moodleId                  String?   @unique
  shortname                 String?
  classroomId               Int?
  classroomName             String?
  classroomShortname        String?
  trainingLocation          String?
  trainingLocationStatus    String?
  primaryTrainer            String?
  secondaryTrainer          String?
  trainingLocationStartDate DateTime?
  trainingLocationEndDate   DateTime?
  startDate                 DateTime
  endDate                   DateTime
  visible                   Boolean   @default(true)
  batchWise                 Boolean   @default(false)
  status                    String    @default("Active")
  teacherId                 String

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  teacher       User             @relation("TeacherCourses", fields: [teacherId], references: [id])
  courseTeachers CourseTeacher[] @relation("CourseTeachers") // Fixed relation name to match CourseTeacher
  enrollments   CourseEnrollment[]
  logs          Log[]
  courseLogs    CourseLog[]

  @@map("courses")
}

model CourseTeacher {
  id        String   @id @default(cuid())
  courseId  String
  teacherId String
  
  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  course  Course @relation("CourseTeachers", fields: [courseId], references: [id], onDelete: Cascade)
  teacher User   @relation("UserCoursesTeaching", fields: [teacherId], references: [id], onDelete: Cascade)

  @@unique([courseId, teacherId])
  @@map("course_teachers")
}

model CourseEnrollment {
  id          String    @id @default(cuid())
  courseId    String
  learnerId   String
  progress    Float     @default(0)
  completed   Boolean   @default(false)
  
  // Timestamps
  enrolledAt  DateTime  @default(now())
  completedAt DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  course  Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
  learner User   @relation(fields: [learnerId], references: [id], onDelete: Cascade)

  @@unique([courseId, learnerId])
  @@map("course_enrollments")
}

model CourseLog {
  id        String   @id @default(cuid())
  userId    String
  courseId  String
  action    String
  metadata  Json?
  
  // Timestamps
  createdAt DateTime @default(now())

  // Relations
  user   User   @relation(fields: [userId], references: [id])
  course Course @relation(fields: [courseId], references: [id])
  
  @@map("course_logs")
}

model Log {
  id                  String    @id @default(cuid())
  caseNo              String    @unique
  date                DateTime
  age                 Float
  sex                 Sex
  uhid                String
  chiefComplaint      String    @db.Text
  historyPresenting   String    @db.Text
  pastHistory         String    @db.Text
  personalHistory     String    @db.Text
  familyHistory       String    @db.Text
  clinicalExamination String    @db.Text
  labExaminations     String    @db.Text
  diagnosis           String    @db.Text
  management          String    @db.Text
  status              LogStatus @default(DRAFT)
  rejectionReason     String?   @db.Text
  teacherComments     String?   @db.Text

  // Timestamps
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  submittedAt DateTime?
  approvedAt  DateTime?
  rejectedAt  DateTime?

  // Foreign Keys
  courseId     String
  createdById  String
  approvedById String?
  rejectedByID String?

  // Relations
  course     Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
  createdBy  User   @relation("LogCreator", fields: [createdById], references: [id], onDelete: Cascade)
  approvedBy User?  @relation("LogApprover", fields: [approvedById], references: [id], onDelete: SetNull)
  rejectedBy User?  @relation("LogRejecter", fields: [rejectedByID], references: [id], onDelete: SetNull)

  @@map("logs")
}